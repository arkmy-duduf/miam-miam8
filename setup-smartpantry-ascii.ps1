# SmartPantry - project generator (ASCII-only, no emojis, no fancy quotes)
$ErrorActionPreference = "Stop"

function New-Dir($p){ if(-not (Test-Path $p)){ New-Item -ItemType Directory -Force -Path $p | Out-Null } }
function Write-FileUtf8($path, [string[]]$lines){
  New-Dir (Split-Path $path)
  $content = ($lines -join "`r`n")
  [IO.File]::WriteAllText($path, $content, [Text.Encoding]::UTF8)
}

$root = "SmartPantry"
$app = "$root/app"
$main = "$app/src/main"
$java = "$main/java/com/tony/smartpantry"
$resv = "$main/res/values"
$theme = "$java/ui/theme"
$screens = "$java/ui/screens"
$vm = "$java/vm"
$data = "$java/data"
$off = "$java/off"
$scanner = "$java/scanner"
$wf = "$root/.github/workflows"
$wrap = "$root/gradle/wrapper"

@($root,$app,$main,$java,$resv,$theme,$screens,$vm,$data,$off,$scanner,$wf,$wrap) | ForEach-Object { New-Dir $_ }

# ---------- Root Gradle ----------
Write-FileUtf8 "$root/settings.gradle.kts" @(
'pluginManagement { repositories { google(); mavenCentral(); gradlePluginPortal() } }',
'dependencyResolutionManagement {',
'  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)',
'  repositories { google(); mavenCentral() }',
'}',
'rootProject.name = "SmartPantry"',
'include(":app")'
)

Write-FileUtf8 "$root/build.gradle.kts" @(
'plugins {',
'  id("com.android.application") version "8.3.2" apply false',
'  id("org.jetbrains.kotlin.android") version "1.9.24" apply false',
'  id("com.google.devtools.ksp") version "1.9.24-1.0.20" apply false',
'}'
)

Write-FileUtf8 "$root/gradle.properties" @(
'org.gradle.jvmargs=-Xmx2048m -XX:MaxMetaspaceSize=1024m -Dkotlin.daemon.jvm.options=-Xmx1024m',
'org.gradle.parallel=false',
'org.gradle.workers.max=2',
'org.gradle.configuration-cache=true',
'org.gradle.caching=true',
'android.useFullClasspathForDexingTransform=true'
)

# ---------- App Gradle ----------
Write-FileUtf8 "$app/build.gradle.kts" @(
'plugins {',
'  id("com.android.application")',
'  id("org.jetbrains.kotlin.android")',
'  id("com.google.devtools.ksp")',
'}',
'',
'android {',
'  namespace = "com.tony.smartpantry"',
'  compileSdk = 34',
'  defaultConfig {',
'    applicationId = "com.tony.smartpantry"',
'    minSdk = 24',
'    targetSdk = 34',
'    versionCode = 1',
'    versionName = "1.0"',
'    testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"',
'    vectorDrawables { useSupportLibrary = true }',
'  }',
'  buildTypes {',
'    release {',
'      isMinifyEnabled = false',
'      proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")',
'    }',
'    debug { isMinifyEnabled = false }',
'  }',
'  compileOptions {',
'    sourceCompatibility = JavaVersion.VERSION_17',
'    targetCompatibility = JavaVersion.VERSION_17',
'  }',
'  kotlinOptions { jvmTarget = "17" }',
'  buildFeatures { compose = true }',
'  composeOptions { kotlinCompilerExtensionVersion = "1.5.14" }',
'  packaging { resources { excludes += "/META-INF/{AL2.0,LGPL2.1}" } }',
'}',
'',
'dependencies {',
'  val composeBom = platform("androidx.compose:compose-bom:2024.06.00")',
'  implementation(composeBom); androidTestImplementation(composeBom)',
'  implementation("androidx.core:core-ktx:1.13.1")',
'  implementation("androidx.activity:activity-compose:1.9.1")',
'  implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.3")',
'  implementation("androidx.compose.ui:ui")',
'  implementation("androidx.compose.ui:ui-tooling-preview")',
'  debugImplementation("androidx.compose.ui:ui-tooling")',
'  implementation("androidx.compose.material3:material3:1.2.1")',
'  implementation("androidx.compose.material:material-icons-extended")',
'  implementation("androidx.navigation:navigation-compose:2.7.7")',
'  implementation("io.coil-kt:coil-compose:2.6.0")',
'  implementation("androidx.room:room-runtime:2.6.1")',
'  implementation("androidx.room:room-ktx:2.6.1")',
'  ksp("androidx.room:room-compiler:2.6.1")',
'  implementation("androidx.sqlite:sqlite:2.4.0")',
'  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1")',
'  implementation("androidx.work:work-runtime-ktx:2.9.0")',
'  implementation("androidx.camera:camera-core:1.3.4")',
'  implementation("androidx.camera:camera-camera2:1.3.4")',
'  implementation("androidx.camera:camera-lifecycle:1.3.4")',
'  implementation("androidx.camera:camera-view:1.3.4")',
'  implementation("com.google.mlkit:barcode-scanning:17.2.0")',
'  implementation("com.squareup.retrofit2:retrofit:2.11.0")',
'  implementation("com.squareup.retrofit2:converter-moshi:2.11.0")',
'  implementation("com.squareup.okhttp3:logging-interceptor:4.12.0")',
'  testImplementation("junit:junit:4.13.2")',
'  androidTestImplementation("androidx.test.ext:junit:1.2.1")',
'  androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")',
'  androidTestImplementation("androidx.compose.ui:ui-test-junit4")',
'}',
'',
'configurations.all {',
'  resolutionStrategy {',
'    force("androidx.room:room-runtime:2.6.1")',
'    force("androidx.room:room-ktx:2.6.1")',
'    force("androidx.sqlite:sqlite:2.4.0")',
'    force("androidx.work:work-runtime-ktx:2.9.0")',
'    force("androidx.camera:camera-core:1.3.4")',
'    force("androidx.camera:camera-camera2:1.3.4")',
'    force("androidx.camera:camera-lifecycle:1.3.4")',
'    force("androidx.camera:camera-view:1.3.4")',
'  }',
'}'
)

Write-FileUtf8 "$app/proguard-rules.pro" @('-keep class com.tony.smartpantry.** { *; }')

# ---------- Manifest & theme ----------
Write-FileUtf8 "$main/AndroidManifest.xml" @(
'<?xml version="1.0" encoding="utf-8"?>',
'<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.tony.smartpantry">',
'  <uses-permission android:name="android.permission.CAMERA"/>',
'  <uses-permission android:name="android.permission.INTERNET"/>',
'  <application android:label="SmartPantry" android:theme="@style/Theme.SmartPantry">',
'    <activity android:name=".MainActivity" android:exported="true">',
'      <intent-filter>',
'        <action android:name="android.intent.action.MAIN"/>',
'        <category android:name="android.intent.category.LAUNCHER"/>',
'      </intent-filter>',
'    </activity>',
'  </application>',
'</manifest>'
)

Write-FileUtf8 "$resv/themes.xml" @(
'<resources>',
'  <style name="Theme.SmartPantry" parent="Theme.Material3.Light.NoActionBar" />',
'</resources>'
)

# ---------- Kotlin sources ----------
Write-FileUtf8 "$java/MainActivity.kt" @(
'package com.tony.smartpantry',
'',
'import android.os.Bundle',
'import androidx.activity.ComponentActivity',
'import androidx.activity.compose.setContent',
'import androidx.activity.viewModels',
'import androidx.compose.foundation.layout.padding',
'import androidx.compose.material.icons.Icons',
'import androidx.compose.material.icons.filled.Fastfood',
'import androidx.compose.material.icons.filled.List',
'import androidx.compose.material.icons.filled.QrCodeScanner',
'import androidx.compose.material.icons.filled.ShoppingCart',
'import androidx.compose.material3.*',
'import androidx.compose.runtime.getValue',
'import androidx.compose.ui.Modifier',
'import androidx.navigation.compose.*',
'import com.tony.smartpantry.ui.screens.*',
'import com.tony.smartpantry.ui.theme.AppTheme',
'import com.tony.smartpantry.vm.*',
'',
'class MainActivity : ComponentActivity() {',
'  private val invVm: InventoryViewModel by viewModels()',
'  private val recVm: RecipesViewModel by viewModels()',
'  private val shopVm: ShoppingViewModel by viewModels()',
'  override fun onCreate(savedInstanceState: Bundle?) {',
'    super.onCreate(savedInstanceState)',
'    setContent {',
'      AppTheme {',
'        val nav = rememberNavController()',
'        val backStack by nav.currentBackStackEntryAsState()',
'        val route = backStack?.destination?.route',
'        Scaffold(bottomBar = {',
'          NavigationBar {',
'            NavigationBarItem(selected = route=="inventory", onClick = { nav.navigate("inventory") }, label = { Text("Inventory") }, icon = { Icon(Icons.Filled.List, null) })',
'            NavigationBarItem(selected = route=="scan", onClick = { nav.navigate("scan") }, label = { Text("Scan") }, icon = { Icon(Icons.Filled.QrCodeScanner, null) })',
'            NavigationBarItem(selected = route=="recipes", onClick = { nav.navigate("recipes") }, label = { Text("Recipes") }, icon = { Icon(Icons.Filled.Fastfood, null) })',
'            NavigationBarItem(selected = route=="shopping", onClick = { nav.navigate("shopping") }, label = { Text("Shopping") }, icon = { Icon(Icons.Filled.ShoppingCart, null) })',
'          }',
'        } ) { pad ->',
'          NavHost(nav, startDestination="scan", modifier = Modifier.padding(pad)) {',
'            composable("inventory"){ InventoryScreen(invVm, shopVm) }',
'            composable("scan"){ ScanScreen(invVm) }',
'            composable("recipes"){ RecipesScreen(recVm, invVm, shopVm) }',
'            composable("shopping"){ ShoppingListScreen(shopVm) }',
'          }',
'        }',
'      }',
'    }',
'  }',
'}'
)

Write-FileUtf8 "$theme/Theme.kt" @(
'package com.tony.smartpantry.ui.theme',
'',
'import androidx.compose.material3.MaterialTheme',
'import androidx.compose.material3.lightColorScheme',
'import androidx.compose.runtime.Composable',
'',
'@Composable',
'fun AppTheme(content: @Composable () -> Unit) {',
'  MaterialTheme(colorScheme = lightColorScheme(), content = content)',
'}'
)

Write-FileUtf8 "$data/Models.kt" @(
'package com.tony.smartpantry.data',
'',
'import androidx.room.*',
'',
'enum class StorageLocation { PANTRY, FRIDGE, FREEZER }',
'enum class MealType { LUNCH, DINNER }',
'',
'@Entity data class Product(@PrimaryKey val barcode: String, val name: String)',
'',
'@Entity(indices=[Index("productBarcode")])',
'data class StockItem(',
'  @PrimaryKey val id: String,',
'  val productBarcode: String,',
'  val quantity: Double,',
'  val location: StorageLocation,',
'  val bestBefore: String? = null',
')',
'',
'@Entity data class Recipe(@PrimaryKey val id: String, val title: String, val instructions: String, val mealType: MealType)',
'',
'@Entity(primaryKeys = ["recipeId","productBarcode"])',
'data class RecipeIngredient(val recipeId: String, val productBarcode: String, val requiredQty: Double)',
'',
'@Entity data class ShoppingItem(@PrimaryKey val id: String, val nameFallback: String, val targetQty: Double, val checked: Boolean = false)'
)

Write-FileUtf8 "$data/Dao.kt" @(
'package com.tony.smartpantry.data',
'',
'import androidx.room.*',
'import kotlinx.coroutines.flow.Flow',
'',
'@Dao interface ProductDao {',
'  @Query("SELECT * FROM Product ORDER BY name") fun all(): Flow<List<Product>>',
'  @Insert(onConflict = OnConflictStrategy.REPLACE) suspend fun upsert(p: Product)',
'  @Query("SELECT * FROM Product WHERE barcode = :bc") suspend fun get(bc: String): Product?',
'}',
'',
'@Dao interface StockDao {',
'  @Query("SELECT * FROM StockItem") fun all(): Flow<List<StockItem>>',
'  @Insert(onConflict = OnConflictStrategy.REPLACE) suspend fun upsert(item: StockItem)',
'  @Query("DELETE FROM StockItem WHERE id = :id") suspend fun delete(id: String)',
'}',
'',
'@Dao interface RecipeDao {',
'  @Query("SELECT * FROM Recipe") fun all(): Flow<List<Recipe>>',
'  @Insert(onConflict = OnConflictStrategy.REPLACE) suspend fun upsert(r: Recipe)',
'  @Insert(onConflict = OnConflictStrategy.REPLACE) suspend fun upsertAll(list: List<RecipeIngredient>)',
'  @Query("SELECT * FROM RecipeIngredient WHERE recipeId = :id") suspend fun ingredientsFor(id: String): List<RecipeIngredient>',
'}',
'',
'@Dao interface ShoppingDao {',
'  @Query("SELECT * FROM ShoppingItem ORDER BY rowid DESC") fun all(): Flow<List<ShoppingItem>>',
'  @Insert(onConflict = OnConflictStrategy.REPLACE) suspend fun upsert(item: ShoppingItem)',
'  @Query("UPDATE ShoppingItem SET checked = :checked WHERE id = :id") suspend fun setChecked(id: String, checked: Boolean)',
'  @Query("DELETE FROM ShoppingItem WHERE id = :id") suspend fun delete(id: String)',
'}'
)

Write-FileUtf8 "$data/Database.kt" @(
'package com.tony.smartpantry.data',
'',
'import android.content.Context',
'import androidx.room.Database',
'import androidx.room.Room',
'import androidx.room.RoomDatabase',
'',
'@Database(entities=[Product::class, StockItem::class, Recipe::class, RecipeIngredient::class, ShoppingItem::class], version=1)',
'abstract class AppDatabase: RoomDatabase() {',
'  abstract fun productDao(): ProductDao',
'  abstract fun stockDao(): StockDao',
'  abstract fun recipeDao(): RecipeDao',
'  abstract fun shoppingDao(): ShoppingDao',
'  companion object {',
'    @Volatile private var INSTANCE: AppDatabase? = null',
'    fun get(ctx: Context): AppDatabase =',
'      INSTANCE ?: synchronized(this) {',
'        INSTANCE ?: Room.databaseBuilder(ctx, AppDatabase::class.java, "smartpantry.db")',
'          .fallbackToDestructiveMigration()',
'          .build().also { INSTANCE = it }',
'      }',
'  }',
'}'
)

Write-FileUtf8 "$data/Repository.kt" @(
'package com.tony.smartpantry.data',
'',
'import android.content.Context',
'import kotlinx.coroutines.flow.Flow',
'import java.util.UUID',
'',
'class Repository(ctx: Context) {',
'  private val db = AppDatabase.get(ctx)',
'  private val productDao = db.productDao()',
'  private val stockDao = db.stockDao()',
'  private val recipeDao = db.recipeDao()',
'  private val shoppingDao = db.shoppingDao()',
'  fun products(): Flow<List<Product>> = productDao.all()',
'  suspend fun upsertProduct(p: Product) = productDao.upsert(p)',
'  suspend fun getProduct(bc: String) = productDao.get(bc)',
'  fun stock(): Flow<List<StockItem>> = stockDao.all()',
'  suspend fun addToStock(barcode: String, qty: Double, loc: StorageLocation, bb: String?) =',
'    stockDao.upsert(StockItem(UUID.randomUUID().toString(), barcode, qty, loc, bb))',
'  suspend fun removeStock(id: String) = stockDao.delete(id)',
'  fun recipes(): Flow<List<Recipe>> = recipeDao.all()',
'  suspend fun upsertRecipe(r: Recipe) = recipeDao.upsert(r)',
'  suspend fun upsertIngredients(list: List<RecipeIngredient>) = recipeDao.upsertAll(list)',
'  suspend fun ingredientsFor(id: String) = recipeDao.ingredientsFor(id)',
'  fun shopping(): Flow<List<ShoppingItem>> = shoppingDao.all()',
'  suspend fun addShopping(name: String, qty: Double) = shoppingDao.upsert(ShoppingItem(UUID.randomUUID().toString(), name, qty))',
'  suspend fun toggleShopping(id: String, checked: Boolean) = shoppingDao.setChecked(id, checked)',
'  suspend fun deleteShopping(id: String) = shoppingDao.delete(id)',
'}'
)

Write-FileUtf8 "$off/OpenFoodFactsApi.kt" @(
'package com.tony.smartpantry.off',
'',
'import retrofit2.http.GET',
'import retrofit2.http.Path',
'import retrofit2.Retrofit',
'import retrofit2.converter.moshi.MoshiConverterFactory',
'',
'data class OFFProduct(val product_name: String? = null, val categories: String? = null)',
'data class OFFResponse(val status: Int, val product: OFFProduct? = null)',
'',
'interface OpenFoodFactsService {',
'  @GET("api/v0/product/{barcode}.json")',
'  suspend fun product(@Path("barcode") barcode: String): OFFResponse',
'}',
'',
'object OpenFoodFactsApi {',
'  val service: OpenFoodFactsService by lazy {',
'    Retrofit.Builder()',
'      .baseUrl("https://world.openfoodfacts.org/")',
'      .addConverterFactory(MoshiConverterFactory.create())',
'      .build()',
'      .create(OpenFoodFactsService::class.java)',
'  }',
'}'
)

Write-FileUtf8 "$scanner/CameraBarcodeAnalyzer.kt" @(
'package com.tony.smartpantry.scanner',
'',
'import android.annotation.SuppressLint',
'import android.media.Image',
'import androidx.camera.core.ImageAnalysis',
'import androidx.camera.core.ImageProxy',
'import com.google.mlkit.vision.barcode.Barcode',
'import com.google.mlkit.vision.barcode.BarcodeScannerOptions',
'import com.google.mlkit.vision.barcode.BarcodeScanning',
'import com.google.mlkit.vision.common.InputImage',
'',
'class CameraBarcodeAnalyzer(private val onBarcode: (String) -> Unit) : ImageAnalysis.Analyzer {',
'  private val options = BarcodeScannerOptions.Builder()',
'    .setBarcodeFormats(Barcode.FORMAT_EAN_13, Barcode.FORMAT_EAN_8, Barcode.FORMAT_UPC_A, Barcode.FORMAT_UPC_E, Barcode.FORMAT_QR_CODE)',
'    .build()',
'  private val scanner = BarcodeScanning.getClient(options)',
'  @Volatile private var dispatched = false',
'  @SuppressLint("UnsafeOptInUsageError")',
'  override fun analyze(imageProxy: ImageProxy) {',
'    val img: Image? = imageProxy.image ?: run { imageProxy.close(); return }',
'    val input = InputImage.fromMediaImage(img, imageProxy.imageInfo.rotationDegrees)',
'    scanner.process(input)',
'      .addOnSuccessListener { codes ->',
'        if (!dispatched) {',
'          val raw = codes.firstOrNull()?.rawValue',
'          if (!raw.isNullOrBlank()) { dispatched = true; onBarcode(raw) }',
'        }',
'      }',
'      .addOnCompleteListener { imageProxy.close() }',
'  }',
'}'
)

Write-FileUtf8 "$vm/InventoryViewModel.kt" @(
'package com.tony.smartpantry.vm',
'',
'import android.app.Application',
'import androidx.lifecycle.AndroidViewModel',
'import androidx.lifecycle.viewModelScope',
'import com.tony.smartpantry.data.*',
'import com.tony.smartpantry.off.OpenFoodFactsApi',
'import kotlinx.coroutines.Dispatchers',
'import kotlinx.coroutines.flow.SharingStarted',
'import kotlinx.coroutines.flow.stateIn',
'import kotlinx.coroutines.launch',
'import kotlinx.coroutines.withContext',
'',
'class InventoryViewModel(app: Application): AndroidViewModel(app) {',
'  private val repo = Repository(app)',
'  val stock = repo.stock().stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())',
'  val products = repo.products().stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())',
'  fun upsertProduct(p: Product) = viewModelScope.launch { repo.upsertProduct(p) }',
'  fun addToStock(barcode: String, qty: Double, location: StorageLocation, bb: String?) =',
'    viewModelScope.launch { repo.addToStock(barcode, qty, location, bb) }',
'  fun removeStock(id: String) = viewModelScope.launch { repo.removeStock(id) }',
'  fun handleBarcodeScan(barcode: String) = viewModelScope.launch {',
'    val name = try {',
'      withContext(Dispatchers.IO) {',
'        val res = OpenFoodFactsApi.service.product(barcode)',
'        if (res.status == 1) res.product?.product_name?.takeIf { it.isNotBlank() } else null',
'      }',
'    } catch (_: Exception) { null }',
'    val p = Product(barcode = barcode, name = name ?: "Scanned product")',
'    repo.upsertProduct(p)',
'    repo.addToStock(barcode, 1.0, StorageLocation.PANTRY, null)',
'  }',
'}'
)

Write-FileUtf8 "$vm/RecipesViewModel.kt" @(
'package com.tony.smartpantry.vm',
'',
'import android.app.Application',
'import androidx.lifecycle.AndroidViewModel',
'import androidx.lifecycle.viewModelScope',
'import com.tony.smartpantry.data.*',
'import kotlinx.coroutines.flow.first',
'import kotlinx.coroutines.launch',
'',
'data class RecipeSuggestion(val recipe: Recipe, val missing: Int, val coverage: Double)',
'',
'class RecipesViewModel(app: Application): AndroidViewModel(app) {',
'  private val repo = Repository(app)',
'  fun seedDemo() = viewModelScope.launch {',
'    val pasta = Product("p1","Pasta"); val tomato = Product("p2","Tomato sauce"); val tuna = Product("p3","Tuna")',
'    listOf(pasta,tomato,tuna).forEach { repo.upsertProduct(it) }',
'    repo.upsertRecipe(Recipe("r1","Pasta tuna tomato","Boil pasta + tuna + tomato sauce", MealType.DINNER))',
'    repo.upsertIngredients(listOf(',
'      RecipeIngredient("r1","p1",120.0),',
'      RecipeIngredient("r1","p2",150.0),',
'      RecipeIngredient("r1","p3",1.0)',
'    ))',
'  }',
'  suspend fun suggest(meal: MealType): List<RecipeSuggestion> {',
'    val stock = repo.stock().first().groupBy { it.productBarcode }.mapValues { it.value.sumOf { s -> s.quantity } }',
'    val recipes = repo.recipes().first().filter { it.mealType == meal }',
'    return recipes.map { r ->',
'      val ings = repo.ingredientsFor(r.id)',
'      val covered = ings.count { (stock[it.productBarcode] ?: 0.0) >= it.requiredQty }',
'      RecipeSuggestion(r, ings.size - covered, if (ings.isEmpty()) 1.0 else covered.toDouble()/ings.size)',
'    }.sortedByDescending { it.coverage }',
'  }',
'  fun addMissingToShopping(recipeId: String) = viewModelScope.launch {',
'    repo.ingredientsFor(recipeId).forEach { ing -> repo.addShopping(ing.productBarcode, ing.requiredQty) }',
'  }',
'}'
)

Write-FileUtf8 "$vm/ShoppingViewModel.kt" @(
'package com.tony.smartpantry.vm',
'',
'import android.app.Application',
'import androidx.lifecycle.AndroidViewModel',
'import androidx.lifecycle.viewModelScope',
'import com.tony.smartpantry.data.Repository',
'import kotlinx.coroutines.flow.SharingStarted',
'import kotlinx.coroutines.flow.stateIn',
'import kotlinx.coroutines.launch',
'',
'class ShoppingViewModel(app: Application): AndroidViewModel(app) {',
'  private val repo = Repository(app)',
'  val items = repo.shopping().stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())',
'  fun add(name: String, qty: Double) = viewModelScope.launch { repo.addShopping(name, qty) }',
'  fun toggle(id: String, checked: Boolean) = viewModelScope.launch { repo.toggleShopping(id, checked) }',
'  fun delete(id: String) = viewModelScope.launch { repo.deleteShopping(id) }',
'}'
)

Write-FileUtf8 "$screens/InventoryScreen.kt" @(
'package com.tony.smartpantry.ui.screens',
'',
'import androidx.compose.foundation.layout.*',
'import androidx.compose.foundation.lazy.LazyColumn',
'import androidx.compose.foundation.lazy.items',
'import androidx.compose.material3.*',
'import androidx.compose.runtime.*',
'import androidx.compose.ui.Modifier',
'import androidx.compose.ui.text.input.TextFieldValue',
'import androidx.compose.ui.unit.dp',
'import com.tony.smartpantry.data.Product',
'import com.tony.smartpantry.data.StorageLocation',
'import com.tony.smartpantry.vm.InventoryViewModel',
'import com.tony.smartpantry.vm.ShoppingViewModel',
'import java.util.UUID',
'',
'@Composable',
'fun InventoryScreen(vm: InventoryViewModel, shoppingVm: ShoppingViewModel) {',
'  val stock by vm.stock.collectAsState()',
'  val products by vm.products.collectAsState()',
'  var name by remember { mutableStateOf(TextFieldValue("")) }',
'  var qty by remember { mutableStateOf(TextFieldValue("1")) }',
'  var location by remember { mutableStateOf(StorageLocation.PANTRY) }',
'  Column(Modifier.fillMaxSize().padding(16.dp)) {',
'    Text("Quick add")',
'    Spacer(Modifier.height(8.dp))',
'    Row {',
'      OutlinedTextField(name, { name = it }, label = { Text("Name") }, modifier = Modifier.weight(1f))',
'      Spacer(Modifier.width(8.dp))',
'      OutlinedTextField(qty, { qty = it }, label = { Text("Qty") }, modifier = Modifier.width(100.dp))',
'    }',
'    Spacer(Modifier.height(8.dp))',
'    Row {',
'      AssistChip(onClick = { location = StorageLocation.PANTRY }, label = { Text("Pantry") }, enabled = location!=StorageLocation.PANTRY)',
'      Spacer(Modifier.width(8	dp))',
'      AssistChip(onClick = { location = StorageLocation.FRIDGE }, label = { Text("Fridge") }, enabled = location!=StorageLocation.FRIDGE)',
'      Spacer(Modifier.width(8	dp))',
'      AssistChip(onClick = { location = StorageLocation.FREEZER }, label = { Text("Freezer") }, enabled = location!=StorageLocation.FREEZER)',
'      Spacer(Modifier.weight(1f))',
'      Button(onClick = {',
'        val n = name.text.trim()',
'        val q = qty.text.toDoubleOrNull() ?: 1.0',
'        if (n.isNotEmpty()) {',
'          val bc = UUID.randomUUID().toString()',
'          vm.upsertProduct(Product(bc, n))',
'          vm.addToStock(bc, q, location, null)',
'          name = TextFieldValue(""); qty = TextFieldValue("1")',
'        }',
'      }) { Text("Add") }',
'    }',
'    Spacer(Modifier.height(16	dp))',
'    Text("Inventory")',
'    LazyColumn {',
'      items(stock) { item ->',
'        val prod = products.find { it.barcode == item.productBarcode }',
'        ListItem(',
'          headlineContent = { Text(prod?.name ?: "Product") },',
'          supportingContent = { Text(item.quantity.toString() + "  •  " + item.location) },',
'          trailingContent = {',
'            Row {',
'              TextButton(onClick = { shoppingVm.add(prod?.name ?: "Product", 1.0) }) { Text("Buy") }',
'              TextButton(onClick = { vm.removeStock(item.id) }) { Text("Remove") }',
'            }',
'          }',
'        )',
'        Divider()',
'      }',
'    }',
'  }',
'}'
)

Write-FileUtf8 "$screens/ScanScreen.kt" @(
'package com.tony.smartpantry.ui.screens',
'',
'import android.Manifest',
'import android.annotation.SuppressLint',
'import android.content.pm.PackageManager',
'import android.util.Size',
'import androidx.activity.compose.rememberLauncherForActivityResult',
'import androidx.activity.result.contract.ActivityResultContracts',
'import androidx.camera.core.CameraSelector',
'import androidx.camera.core.ImageAnalysis',
'import androidx.camera.core.Preview',
'import androidx.camera.lifecycle.ProcessCameraProvider',
'import androidx.camera.view.PreviewView',
'import androidx.compose.foundation.layout.*',
'import androidx.compose.material3.*',
'import androidx.compose.runtime.*',
'import androidx.compose.ui.Modifier',
'import androidx.compose.ui.platform.LocalContext',
'import androidx.compose.ui.platform.LocalLifecycleOwner',
'import androidx.compose.ui.unit.dp',
'import androidx.compose.ui.viewinterop.AndroidView',
'import androidx.core.content.ContextCompat',
'import com.tony.smartpantry.scanner.CameraBarcodeAnalyzer',
'import com.tony.smartpantry.vm.InventoryViewModel',
'',
'@SuppressLint("UnsafeOptInUsageError")',
'@Composable',
'fun ScanScreen(vm: InventoryViewModel) {',
'  val ctx = LocalContext.current',
'  var camGranted by remember {',
'    mutableStateOf(ContextCompat.checkSelfPermission(ctx, Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED)',
'  }',
'  val launcher = rememberLauncherForActivityResult(ActivityResultContracts.RequestPermission()) { granted -> camGranted = granted }',
'  var lastCode by remember { mutableStateOf<String?>(null) }',
'  var added by remember { mutableStateOf(false) }',
'  Column(Modifier.fillMaxSize()) {',
'    if (!camGranted) {',
'      Column(Modifier.fillMaxWidth().padding(16	dp)) {',
'        Text("This app needs camera to scan barcodes.")',
'        Spacer(Modifier.height(8	dp))',
'        Button(onClick = { launcher.launch(Manifest.permission.CAMERA) }) { Text("Allow camera") }',
'      }',
'    } else {',
'      CameraPreview(onBarcode = { code ->',
'        lastCode = code',
'        if (!added) { added = true; vm.handleBarcodeScan(code) }',
'      }, key = added)',
'    }',
'    Spacer(Modifier.height(12	dp))',
'    Row(Modifier.padding(16	dp)) {',
'      if (lastCode != null) {',
'        Text("Scanned: " + lastCode!!)',
'        Spacer(Modifier.width(12	dp))',
'        Button(onClick = { added = false; lastCode = null }) { Text("Scan again") }',
'      } else Text("Aim a barcode...")',
'    }',
'  }',
'}',
'',
'@Composable',
'private fun CameraPreview(onBarcode: (String) -> Unit, key: Any) {',
'  val ctx = LocalContext.current',
'  val owner = LocalLifecycleOwner.current',
'  AndroidView(factory = { context ->',
'    val pv = PreviewView(context).apply { scaleType = PreviewView.ScaleType.FILL_CENTER }',
'    val future = ProcessCameraProvider.getInstance(context)',
'    future.addListener({',
'      val provider = future.get()',
'      val preview = Preview.Builder().build().also { it.setSurfaceProvider(pv.surfaceProvider) }',
'      val analysis = ImageAnalysis.Builder()',
'        .setTargetResolution(Size(1280,720))',
'        .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)',
'        .build().also { it.setAnalyzer(',
'          ContextCompat.getMainExecutor(context),',
'          CameraBarcodeAnalyzer(onBarcode)',
'        ) }',
'      val selector = CameraSelector.DEFAULT_BACK_CAMERA',
'      try {',
'        provider.unbindAll()',
'        provider.bindToLifecycle(owner, selector, preview, analysis)',
'      } catch (_: Exception) {}',
'    }, ContextCompat.getMainExecutor(context))',
'    pv',
'  }, update = {}, modifier = Modifier.fillMaxWidth().weight(1f), key = key)',
'}'
)

Write-FileUtf8 "$screens/RecipesScreen.kt" @(
'package com.tony.smartpantry.ui.screens',
'',
'import androidx.compose.foundation.layout.*',
'import androidx.compose.foundation.lazy.LazyColumn',
'import androidx.compose.foundation.lazy.items',
'import androidx.compose.material3.*',
'import androidx.compose.runtime.*',
'import androidx.compose.ui.Modifier',
'import androidx.compose.ui.unit.dp',
'import com.tony.smartpantry.data.MealType',
'import com.tony.smartpantry.vm.InventoryViewModel',
'import com.tony.smartpantry.vm.RecipesViewModel',
'import com.tony.smartpantry.vm.ShoppingViewModel',
'import kotlinx.coroutines.launch',
'',
'@Composable',
'fun RecipesScreen(vm: RecipesViewModel, invVm: InventoryViewModel, shopVm: ShoppingViewModel) {',
'  val scope = rememberCoroutineScope()',
'  var meal by remember { mutableStateOf(MealType.DINNER) }',
'  var list by remember { mutableStateOf(emptyList<com.tony.smartpantry.vm.RecipeSuggestion>()) }',
'  Column(Modifier.fillMaxSize().padding(16	dp)) {',
'    Row {',
'      FilterChip(selected = meal==MealType.LUNCH, onClick = { meal = MealType.LUNCH }, label = { Text("Lunch") })',
'      Spacer(Modifier.width(8	dp))',
'      FilterChip(selected = meal==MealType.DINNER, onClick = { meal = MealType.DINNER }, label = { Text("Dinner") })',
'      Spacer(Modifier.weight(1f))',
'      OutlinedButton(onClick = { vm.seedDemo() }) { Text("Load demo") }',
'      Spacer(Modifier.width(8	dp))',
'      Button(onClick = { scope.launch { list = vm.suggest(meal) } }) { Text("Suggest") }',
'    }',
'    Spacer(Modifier.height(12	dp))',
'    LazyColumn {',
'      items(list) { s ->',
'        Card(Modifier.fillMaxWidth().padding(vertical = 6	dp)) {',
'          Column(Modifier.padding(12	dp)) {',
'            Text(s.recipe.title)',
'            LinearProgressIndicator(progress = { s.coverage.toFloat() }, modifier = Modifier.fillMaxWidth().padding(vertical = 8	dp))',
'            if (s.missing > 0) {',
'              Text("Missing: " + s.missing)',
'              TextButton(onClick = { vm.addMissingToShopping(s.recipe.id) }) { Text("Add missing to shopping") }',
'            } else Text("You have everything")',
'          }',
'        }',
'      }',
'    }',
'  }',
'}'
)

Write-FileUtf8 "$screens/ShoppingListScreen.kt" @(
'package com.tony.smartpantry.ui.screens',
'',
'import androidx.compose.foundation.layout.*',
'import androidx.compose.foundation.lazy.LazyColumn',
'import androidx.compose.foundation.lazy.items',
'import androidx.compose.material3.*',
'import androidx.compose.runtime.*',
'import androidx.compose.ui.Modifier',
'import androidx.compose.ui.text.input.TextFieldValue',
'import androidx.compose.ui.unit.dp',
'import com.tony.smartpantry.vm.ShoppingViewModel',
'',
'@Composable',
'fun ShoppingListScreen(vm: ShoppingViewModel) {',
'  val items by vm.items.collectAsState()',
'  var name by remember { mutableStateOf(TextFieldValue("")) }',
'  var qty by remember { mutableStateOf(TextFieldValue("1")) }',
'  Column(Modifier.fillMaxSize().padding(16	dp)) {',
'    Text("Shopping list")',
'    Spacer(Modifier.height(8	dp))',
'    Row {',
'      OutlinedTextField(name, { name = it }, label = { Text("Item") }, modifier = Modifier.weight(1f))',
'      Spacer(Modifier.width(8	dp))',
'      OutlinedTextField(qty, { qty = it }, label = { Text("Qty") }, modifier = Modifier.width(100	dp))',
'      Spacer(Modifier.width(8	dp))',
'      Button(onClick = {',
'        val n = name.text.trim(); val q = qty.text.toDoubleOrNull() ?: 1.0',
'        if (n.isNotEmpty()) { vm.add(n, q); name = TextFieldValue(""); qty = TextFieldValue("1") }',
'      }) { Text("Add") }',
'    }',
'    Spacer(Modifier.height(12	dp))',
'    LazyColumn {',
'      items(items) { itx ->',
'        ListItem(',
'          headlineContent = { Text(itx.nameFallback) },',
'          supportingContent = { Text("x" + itx.targetQty) },',
'          trailingContent = {',
'            Row {',
'              TextButton(onClick = { vm.toggle(itx.id, !itx.checked) }) { Text(if (itx.checked) "Uncheck" else "Check") }',
'              TextButton(onClick = { vm.delete(itx.id) }) { Text("Del") }',
'            }',
'          }',
'        )',
'        Divider()',
'      }',
'    }',
'  }',
'}'
)

# ---------- Gradle wrapper (Windows script + properties; jar placeholder) ----------
Write-FileUtf8 "$root/gradlew.bat" @(
'@ECHO OFF',
'set DIR=%~dp0',
'set APP_HOME=%DIR%',
'set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar',
'set JAVA_EXE=java',
'"%JAVA_EXE%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*'
)
Write-FileUtf8 "$wrap/gradle-wrapper.properties" @(
'distributionBase=GRADLE_USER_HOME',
'distributionPath=wrapper/dists',
'distributionUrl=https\://services.gradle.org/distributions/gradle-8.6-bin.zip',
'zipStoreBase=GRADLE_USER_HOME',
'zipStorePath=wrapper/dists'
)
[IO.File]::WriteAllBytes("$wrap/gradle-wrapper.jar", [byte[]]@())

# ---------- GitHub Actions workflow ----------
Write-FileUtf8 "$wf/android.yml" @(
'name: Android CI',
'on:',
'  push:',
'    branches: [ main, master ]',
'  pull_request:',
'jobs:',
'  build:',
'    runs-on: ubuntu-latest',
'    steps:',
'    - uses: actions/checkout@v4',
'    - name: Set up JDK 17',
'      uses: actions/setup-java@v4',
'      with:',
'        distribution: temurin',
'        java-version: 17',
'    - name: Cache Gradle',
'      uses: gradle/actions/setup-gradle@v3',
'    - name: Build Debug APK',
'      run: ./gradlew assembleDebug --stacktrace',
'    - name: Upload APK artifact',
'      uses: actions/upload-artifact@v4',
'      with:',
'        name: app-debug-apk',
'        path: app/build/outputs/apk/debug/app-debug.apk'
)

Write-FileUtf8 "$root/README.md" @(
'# SmartPantry',
'Build locally: open SmartPantry in Android Studio, let Gradle sync, Build > Generate APKs.',
'GitHub Actions: push to your repo (miam-miam8), then download the app-debug-apk artifact from Actions.'
)

Write-Host ""
Write-Host "OK - Project generated: SmartPantry"
